(ns midiout.core)

(defn get-device-infos []
  (into [] (javax.sound.midi.MidiSystem/getMidiDeviceInfo)))

(defn get-device [info]
  (javax.sound.midi.MidiSystem/getMidiDevice info))

(defn get-nth-device [n]
  (get-device (nth (get-device-infos) n)))

(defn get-sequencer
  ([] (javax.sound.midi.MidiSystem/getSequencer))
  ([connected] (javax.sound.midi.MidiSystem/getSequencer connected)))

(defn make-midi-sequence [ticks-per-beat]
  (new javax.sound.midi.Sequence javax.sound.midi.Sequence/PPQ ticks-per-beat))

(defn make-short-msg [cmd chan data1 data2]
  (let [msg (new javax.sound.midi.ShortMessage)]
    (.setMessage msg cmd chan data1 data2)
    msg))

(defn make-midi-event [msg tick]
  (new javax.sound.midi.MidiEvent msg tick))

(def midi-state (atom nil))

(defn init-midi []
  (let [synth (get-nth-device 0)
        sequencer (get-sequencer false)]
    (. synth open)
    (. sequencer open)
    (.. sequencer getTransmitter (setReceiver (.getReceiver synth)))
    (reset! midi-state {:synth synth :sequencer sequencer})))

(defn deinit-midi []
  (let [{:keys [synth sequencer]} @midi-state]
    (. sequencer close)
    (. synth close)
    (reset! midi-state nil)))

(defn play [{:keys [notes durs vels]} bpm ticks-per-beat]
  (let [{:keys [synth sequencer]} @midi-state
        seq (make-midi-sequence ticks-per-beat)
        track (. seq createTrack)]
    (doto track
      (.add (make-midi-event (make-short-msg 0x90 0 40 127) 0))
      (.add (make-midi-event (make-short-msg 0x80 0 0 0) 64)))
    (doto sequencer
       (.stop)
      (.setSequence seq)
      (.setTempoInBPM bpm)
      (.setTickPosition 0)
      (.start))))
